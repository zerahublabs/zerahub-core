// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model CollectionCategory {
    id           String      @id @default(uuid())
    value        String
    createdAt    String
    updatedAt    String
    Collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    collectionId String?
}

model User {
    id         String       @id @default(uuid())
    username   String       @unique
    address    String       @unique
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @default(now())
    deletedAt  DateTime?
    Collection Collection[]
}

model Collection {
    id              String               @id @default(uuid())
    userId          String
    title           String
    description     String
    price           Int                  @default(0)
    cover           String?
    isRegistered    Boolean              @default(false)
    transactionHash String?
    isDeleted       Boolean              @default(false)
    createdAt       DateTime             @default(now())
    updatedAt       DateTime             @default(now())
    deletedAt       DateTime?
    categories      CollectionCategory[]

    status CollectionStatus @default(DRAFT)

    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    coverStorage       Storage?             @relation(fields: [cover], references: [id], onDelete: SetNull, onUpdate: Cascade)
    CollectionMetadata CollectionMetadata[]
}

model CollectionMetadata {
    id           String    @id @default(uuid())
    collectionid String
    key          String
    value        String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now())
    deletedAt    DateTime?

    collection Collection @relation(fields: [collectionid], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Storage {
    id              String            @id @default(uuid())
    filename        String            @unique
    bucket          String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @default(now())
    deletedAt       DateTime?
    StorageMetadata StorageMetadata[]
    Collection      Collection[]
}

model StorageMetadata {
    id        String   @id @default(uuid())
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    storageId String

    storage Storage @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CollectionStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
    SUSPENDED
}
