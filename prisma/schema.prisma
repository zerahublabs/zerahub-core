// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model CollectionCategory {
    id        String   @id @default(uuid())
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    collectionId String?
    Collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([id])
}

model User {
    id        String    @id @default(uuid())
    username  String    @unique
    address   String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    Collection           Collection[]
    StorageUploadRequest StorageUploadRequest[]

    @@index([address])
}

model Collection {
    id              String    @id @default(uuid())
    userId          String
    title           String
    description     String
    price           Int       @default(0)
    cover           String?
    isRegistered    Boolean   @default(false)
    transactionHash String?
    isDeleted       Boolean   @default(false)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?

    status CollectionStatus @default(DRAFT)

    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    coverStorage       Storage?             @relation(fields: [cover], references: [id], onDelete: SetNull, onUpdate: Cascade)
    categories         CollectionCategory[]
    CollectionMetadata CollectionMetadata[]
}

model CollectionMetadata {
    id           String    @id @default(uuid())
    collectionId String
    key          String
    value        String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?

    collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CollectionStorage {
    id        String                  @id @default(uuid())
    filename  String
    size      BigInt
    checksum  String?
    status    CollectionStorageStatus @default(PENDING)
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt

    CollectionStorageFile CollectionStorageFile[]
}

model CollectionStorageFile {
    id        String   @id @default(uuid())
    path      String
    filename  String
    extension String
    size      BigInt
    mimeType  String
    checksum  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    collectionStorageId String
    collectionStorage   CollectionStorage @relation(fields: [collectionStorageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([collectionStorageId, path, filename])
}

model Storage {
    id        String    @id @default(uuid())
    key       String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    StorageMetadata StorageMetadata[]
    Collection      Collection[]
}

model StorageMetadata {
    id        String   @id @default(uuid())
    key       String   @unique
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    storageId String

    storage Storage @relation(fields: [storageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StorageUploadRequest {
    id        String   @id @default(uuid())
    type      String
    size      BigInt
    url       String
    key       String   @unique
    expiresAt DateTime
    used      Boolean  @default(false)
    createdAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CollectionStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
    SUSPENDED
}

enum CollectionStorageStatus {
    PENDING
    INDEXING
    FAILED
    SUCCESS
}
